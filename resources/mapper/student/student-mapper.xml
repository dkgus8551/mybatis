<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="student">
	<!-- 
		namespace : mapper 파일의 고유한 별칭
		
		* mapper 파일에서 사용 가능한 태그들
		1. 쿼리문과 관련된 태그
		 - DML문과 관련된 태그
		 <insert id="각 쿼리문의 식별자" parameterType="전달 받을 자바 타입(미작성 시 오브젝트 타입 전달) 혹은 별칭"></insert>
		 <update></update>
		 <delete></delete>
		 
		 - DQL문과 관련된 태그
		 <select id="식별자" parameterType="자바 클래스"
		 	resultType="조회 결과를 자동 매핑할 자바 타입"
		 	resultMap="조회 결과를 뽑아서 매핑할 resultMap의 id">
		 	</select>
		 
		 - DQL문에서는 resultType이나 resultMap이 필수
		 - DML문은 항상 처리한 행의 개수를 반환하기 때문에 resultType을 작성하지 않음
		 - 쿼리문을 실행하는 데 필요한 데이터를 바인딩할 때는 #{필드명, 변수명, key값} 사용하거나
		   ${필드명, 변수명, key값}을 사용
		 
		 resultMap 태그
		  - ResultSet으로 조회된 칼럼 값을 하나씩 뽑아서 지정한 vo클래스의 각 필드에
		    직접 데이터를 매핑하는 역할의 태그
		  
		  - 기본 생성자 호출 후 setter 메소드를 호출하여 데이터 바인딩
		  <resultMap id="식별자" type="자바 클래스명 or 별칭">
		  	<id column="DB 칼럼명" property="필드명"/>
		  	<result column="DB 칼럼명" property="필드명"/>
		  	...
		  	<collection property="필드명" resultMap="식별자"/>
		  	<association property="필드명" resultMap="식별자"/>
		  
		  </resultMap>
		  
		  - 생성자 방식의 데이터 바인딩
		  <resultMap id="식별자" type="자바 클래스명 or 별칭">
		  	<constructor>
		  		<idArg/>
		  		<arg/>  
		  	</constructor>  
		  </resultMap>
	 -->
	
	<insert id="insertStudent" parameterType="student">
		INSERT INTO STUDENT(NO, NAME, TEL)
		VALUES (SEQ_STUDENT_NO.NEXTVAL,#{name}, #{tel})
	</insert>
	
	<insert id="insertStudentMap" parameterType="hashmap">
		INSERT INTO STUDENT(NO, NAME, TEL)
		VALUES (SEQ_STUDENT_NO.NEXTVAL,#{name}, #{tel})
	</insert>
	
	<!-- 
		resultSet을 mybatis가 자동으로 vo클래스로 매핑
		1. 칼럼명과 동일한 이름의 필드의 setter 메소드를 호출하여 값을 대입
		2. 자동 형변환 처리
			varchar2, char -> String
			number -> int/double
			date -> java.util.date
		
		필드명 불일치 시
		1. mybatis-config.xml의 setting 속성에 mapUnderscoreToCamelCase를 true 설정
		2. 쿼리문에 별칭을 부여하여 해결할 수 있음
			EX) SELECT reg_date AS "regDate"
		3. resultMap을 이용
	 -->
	<select id="selectOneStudent" parameterType="int" resultType="student">
		SELECT 
			*
		  FROM STUDENT
		 WHERE NO = #{no}
	</select>
	
	<select id="selectStudentCount" resultType="int">
		SELECT COUNT(*)
		FROM STUDENT
	</select>
	
	<update id="updateStudent" parameterType="student">
		UPDATE STUDENT 
		SET NAME = #{name},
		    TEL = #{tel}
		WHERE NO = #{no}
	</update>
  	
  	<select id="selectStudentList" resultMap="studentMap">
  		SELECT *
  		FROM STUDENT
  		ORDER BY NO DESC
  	</select>
  	
  	<!-- 
  		1. 기본 생성자 new Student();
  		2. setter 메소드 호출 -> 데이터 바인딩
  		
  		- column의 이름과 prorerty의 이름이 동일하다면 생략 가능
  	 -->
  	<resultMap id="studentMap" type="student">
  		<id column="NO" property="no"/>
  		<result column="NAME" property="name"/>
  		<result column="TEL" property="tel"/>
  		<result column="REG_DATE" property="regDate"/>
  	</resultMap>
  	
  	
  	
  	
</mapper>